extern void print(u8* str);

i32 optimize_1(u8* buffer) {
    i32 index = 0;

    u8* null = (u8*)0;
    if (buffer == null) {
        return 0;
    }

    while (buffer[index] != 0u8) {
        buffer[index] += 1u8;
        buffer[index] += 1u8;
        if (buffer[index] == 12u8) {
            while (1) {
            }
        }

        index += 1;
    }

    return 312;
}

i32 optimize_2(i32* x) {
    *x = 1337;

    while (1) {
    }

    return 1;
}

i32 optimize_3(i32 a) {
    if (a != 0) {
        return 123;
    } else {
        return 321;
    }

    return 1;
}


i32 optimize_4(i32 a) {
    if (a == 4) {
        a = 555;
    } else {
        a = 823;
    }

    return a;
}

u32 optimize_5(u32 a) {
    return (~(~a & 0xffffffff)) * (1u32 + (a ^ a));
}

i32 optimize_6(i32 count) {
    i32 total = 0;

    for (i32 i = 0; i < count; i += 1) {
        for (i32 j = 0; j < i; j += 1) {
            total += j;
        }
    }

    return total;
}

void optimize_7() {
    i32 ptr = 0;

    *(i8*)&ptr = 13i8;
}

i32 optimize_8(i32 value) {
    i32 result;

    if (value == 22) {
        result = 49;
    } else {
        result += 8;
    }

    return result;
}

i32 optimize_9(i32 value) {
    i32 output;

    if (value == 4) {
        output = 55;
    }

    if (value > 33) {
        output += 44;
    }

    if (value > 88) {
        output -= 4;
    }

    return output;
}

i32 optimize_10(i32 count) {
    i32 total = 0;

    for (i32 i = 0; i < count; i += 1) {
        total += i;
    }

    return total;
}

i32 optimize_11(i32 x) {
    return (1 + 2 + x) * (x + (1+2));
}

void call_x() {
}

void optimize_12(i32 x) {
    while (x == 7) {
        call_x();
        x = 0;
    }
}

u32 optimize_13(u32 a) {
    if (a == 20) {
        a += 4;
    } else {
        a = 1337;
    }

    return a & 0xfff;
}
